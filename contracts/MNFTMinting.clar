(define-constant ERR-NOT-AUTHORIZED u1000)
(define-constant ERR-INVALID-TIER u1001)
(define-constant ERR-INSUFFICIENT-BALANCE u1002)
(define-constant ERR-NFT-ALREADY-OWNED u1003)
(define-constant ERR-INVALID-PRICE u1004)
(define-constant ERR-INVALID-EXPIRY u1005)
(define-constant ERR-NFT-NOT-FOUND u1006)
(define-constant ERR-UPGRADE-NOT-ALLOWED u1007)
(define-constant ERR-INVALID-OWNER u1008)
(define-constant ERR-MAX-NFTS-EXCEEDED u1009)
(define-constant ERR-INVALID-METADATA u1010)
(define-constant ERR-AUTHORITY-NOT-SET u1011)
(define-constant ERR-INVALID-TRANSFER u1012)
(define-constant ERR-PAUSED u1013)
(define-constant ERR-INVALID-BURN u1014)
(define-constant ERR-INVALID-MINT-AMOUNT u1015)
(define-constant ERR-TIER-NOT-ACTIVE u1016)
(define-constant ERR-INVALID-ADMIN u1017)
(define-constant ERR-METADATA-TOO-LONG u1018)
(define-constant ERR-INVALID-TIMESTAMP u1019)
(define-constant ERR-TRANSFER-NOT-ALLOWED u1020)

(define-non-fungible-token support-tier uint)

(define-data-var next-nft-id uint u1)
(define-data-var max-nfts uint u10000)
(define-data-var mint-fee uint u500)
(define-data-var admin-principal principal tx-sender)
(define-data-var authority-contract (optional principal) none)
(define-data-var contract-paused bool false)
(define-data-var base-uri (string-ascii 256) "ipfs://QmBaseURI/")

(define-map nft-owners uint principal)
(define-map owner-nfts principal uint)
(define-map nft-tiers uint {tier-level: uint, expiry: (optional uint), metadata: (string-utf8 256)})
(define-map tier-prices uint uint)
(define-map tier-active uint bool)
(define-map nft-history uint (list 10 {action: (string-ascii 20), timestamp: uint, actor: principal}))

(define-read-only (get-nft-owner (nft-id uint))
  (map-get? nft-owners nft-id)
)

(define-read-only (get-owner-nft (owner principal))
  (map-get? owner-nfts owner)
)

(define-read-only (get-nft-tier (nft-id uint))
  (map-get? nft-tiers nft-id)
)

(define-read-only (get-tier-price (tier uint))
  (map-get? tier-prices tier)
)

(define-read-only (is-tier-active (tier uint))
  (default-to false (map-get? tier-active tier))
)

(define-read-only (get-nft-history (nft-id uint))
  (map-get? nft-history nft-id)
)

(define-read-only (get-next-nft-id)
  (var-get next-nft-id)
)

(define-read-only (is-owner (nft-id uint) (user principal))
  (is-eq (some user) (get-nft-owner nft-id))
)

(define-private (validate-tier (tier uint))
  (if (and (>= tier u1) (<= tier u3))
    (ok true)
    (err ERR-INVALID-TIER)
  )
)

(define-private (validate-price (price uint))
  (if (> price u0)
    (ok true)
    (err ERR-INVALID-PRICE)
  )
)

(define-private (validate-expiry (expiry (optional uint)))
  (match expiry
    e (if (> e block-height) (ok true) (err ERR-INVALID-EXPIRY))
    (ok true)
  )
)

(define-private (validate-metadata (meta (string-utf8 256)))
  (if (<= (len meta) u256)
    (ok true)
    (err ERR-METADATA-TOO-LONG)
  )
)

(define-private (validate-mint-amount (amount uint) (tier uint))
  (let ((tier-price (unwrap! (get-tier-price tier) (err ERR-INVALID-TIER))))
    (if (>= amount tier-price)
      (ok true)
      (err ERR-INVALID-MINT-AMOUNT)
    )
  )
)

(define-private (validate-owner (nft-id uint) (user principal))
  (if (is-owner nft-id user)
    (ok true)
    (err ERR-INVALID-OWNER)
  )
)

(define-private (validate-transfer (nft-id uint))
  (let ((tier-info (unwrap! (get-nft-tier nft-id) (err ERR-NFT-NOT-FOUND))))
    (if (is-none (get expiry tier-info))
      (ok true)
      (err ERR-TRANSFER-NOT-ALLOWED)
    )
  )
)

(define-private (log-history (nft-id uint) (action (string-ascii 20)) (actor principal))
  (map-set nft-history nft-id
    (unwrap-panic (as-max-len? (append (default-to (list) (get-nft-history nft-id))
      {action: action, timestamp: block-height, actor: actor}) u10))
  )
)

(define-public (set-authority-contract (contract principal))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set authority-contract (some contract))
    (ok true)
  )
)

(define-public (set-mint-fee (new-fee uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-price new-fee))
    (var-set mint-fee new-fee)
    (ok true)
  )
)

(define-public (pause-contract (paused bool))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set contract-paused paused)
    (ok true)
  )
)

(define-public (set-tier-price (tier uint) (price uint))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-tier tier))
    (try! (validate-price price))
    (map-set tier-prices tier price)
    (ok true)
  )
)

(define-public (set-tier-active (tier uint) (active bool))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-tier tier))
    (map-set tier-active tier active)
    (ok true)
  )
)

(define-public (set-base-uri (new-uri (string-ascii 256)))
  (begin
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (var-set base-uri new-uri)
    (ok true)
  )
)

(define-public (mint-nft (tier uint) (metadata (string-utf8 256)))
  (let ((nft-id (var-get next-nft-id)) (recipient tx-sender))
    (asserts! (not (var-get contract-paused)) (err ERR-PAUSED))
    (asserts! (is-none (get-owner-nft recipient)) (err ERR-NFT-ALREADY-OWNED))
    (try! (validate-tier tier))
    (asserts! (is-tier-active tier) (err ERR-TIER-NOT-ACTIVE))
    (try! (validate-metadata metadata))
    (let ((price (unwrap! (get-tier-price tier) (err ERR-INVALID-TIER))))
      (asserts! (>= (stx-get-balance tx-sender) price) (err ERR-INSUFFICIENT-BALANCE))
      (try! (stx-transfer? price tx-sender (var-get admin-principal)))
    )
    (try! (nft-mint? support-tier nft-id recipient))
    (map-set nft-owners nft-id recipient)
    (map-set owner-nfts recipient nft-id)
    (map-set nft-tiers nft-id {tier-level: tier, expiry: none, metadata: metadata})
    (log-history nft-id "mint" recipient)
    (var-set next-nft-id (+ nft-id u1))
    (print {event: "nft-minted", id: nft-id, owner: recipient, tier: tier})
    (ok nft-id)
  )
)

(define-public (upgrade-tier (nft-id uint) (new-tier uint) (new-expiry (optional uint)))
  (let ((current-tier (unwrap! (get-nft-tier nft-id) (err ERR-NFT-NOT-FOUND))) (owner (unwrap! (get-nft-owner nft-id) (err ERR-NFT-NOT-FOUND))))
    (asserts! (is-eq tx-sender owner) (err ERR-NOT-AUTHORIZED))
    (try! (validate-tier new-tier))
    (asserts! (> new-tier (get tier-level current-tier)) (err ERR-UPGRADE-NOT-ALLOWED))
    (try! (validate-expiry new-expiry))
    (let ((current-price (unwrap! (get-tier-price (get tier-level current-tier)) (err ERR-INVALID-TIER))) (new-price (unwrap! (get-tier-price new-tier) (err ERR-INVALID-TIER))))
      (let ((upgrade-cost (- new-price current-price)))
        (asserts! (>= (stx-get-balance tx-sender) upgrade-cost) (err ERR-INSUFFICIENT-BALANCE))
        (try! (stx-transfer? upgrade-cost tx-sender (var-get admin-principal)))
      )
    )
    (map-set nft-tiers nft-id {tier-level: new-tier, expiry: new-expiry, metadata: (get metadata current-tier)})
    (log-history nft-id "upgrade" owner)
    (print {event: "tier-upgraded", id: nft-id, new-tier: new-tier})
    (ok true)
  )
)

(define-public (burn-nft (nft-id uint))
  (let ((owner (unwrap! (get-nft-owner nft-id) (err ERR-NFT-NOT-FOUND))))
    (asserts! (is-eq tx-sender owner) (err ERR-NOT-AUTHORIZED))
    (try! (nft-burn? support-tier nft-id owner))
    (map-delete nft-owners nft-id)
    (map-delete owner-nfts owner)
    (map-delete nft-tiers nft-id)
    (map-delete nft-history nft-id)
    (log-history nft-id "burn" owner)
    (print {event: "nft-burned", id: nft-id})
    (ok true)
  )
)

(define-public (transfer-nft (nft-id uint) (recipient principal))
  (let ((owner (unwrap! (get-nft-owner nft-id) (err ERR-NFT-NOT-FOUND))))
    (asserts! (is-eq tx-sender owner) (err ERR-NOT-AUTHORIZED))
    (try! (validate-transfer nft-id))
    (asserts! (is-none (get-owner-nft recipient)) (err ERR-NFT-ALREADY-OWNED))
    (try! (nft-transfer? support-tier nft-id owner recipient))
    (map-set nft-owners nft-id recipient)
    (map-delete owner-nfts owner)
    (map-set owner-nfts recipient nft-id)
    (log-history nft-id "transfer" recipient)
    (print {event: "nft-transferred", id: nft-id, new-owner: recipient})
    (ok true)
  )
)

(define-public (admin-mint (recipient principal) (tier uint) (metadata (string-utf8 256)) (expiry (optional uint)))
  (let ((nft-id (var-get next-nft-id)))
    (asserts! (is-eq tx-sender (var-get admin-principal)) (err ERR-NOT-AUTHORIZED))
    (try! (validate-tier tier))
    (try! (validate-metadata metadata))
    (try! (validate-expiry expiry))
    (try! (nft-mint? support-tier nft-id recipient))
    (map-set nft-owners nft-id recipient)
    (map-set owner-nfts recipient nft-id)
    (map-set nft-tiers nft-id {tier-level: tier, expiry: expiry, metadata: metadata})
    (log-history nft-id "admin-mint" recipient)
    (var-set next-nft-id (+ nft-id u1))
    (print {event: "admin-minted", id: nft-id, recipient: recipient})
    (ok nft-id)
  )
)

(define-public (update-metadata (nft-id uint) (new-metadata (string-utf8 256)))
  (let ((tier-info (unwrap! (get-nft-tier nft-id) (err ERR-NFT-NOT-FOUND))) (owner (unwrap! (get-nft-owner nft-id) (err ERR-NFT-NOT-FOUND))))
    (asserts! (is-eq tx-sender owner) (err ERR-NOT-AUTHORIZED))
    (try! (validate-metadata new-metadata))
    (map-set nft-tiers nft-id {tier-level: (get tier-level tier-info), expiry: (get expiry tier-info), metadata: new-metadata})
    (log-history nft-id "metadata-update" owner)
    (ok true)
  )
)

(define-public (extend-expiry (nft-id uint) (new-expiry uint))
  (let ((tier-info (unwrap! (get-nft-tier nft-id) (err ERR-NFT-NOT-FOUND))) (owner (unwrap! (get-nft-owner nft-id) (err ERR-NFT-NOT-FOUND))))
    (asserts! (is-eq tx-sender owner) (err ERR-NOT-AUTHORIZED))
    (asserts! (> new-expiry block-height) (err ERR-INVALID-EXPIRY))
    (match (get expiry tier-info)
      current-expiry (asserts! (> new-expiry current-expiry) (err ERR-INVALID-EXPIRY))
      (ok true)
    )
    (map-set nft-tiers nft-id {tier-level: (get tier-level tier-info), expiry: (some new-expiry), metadata: (get metadata tier-info)})
    (log-history nft-id "expiry-extend" owner)
    (ok true)
  )
)